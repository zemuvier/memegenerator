(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'img'"
p3
sS'layer'
p4
S'/vagrant/web2py/applications/memegenerator/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nimport ctypes\nimport os.path\nimport cgi\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if request.vars.text:\n        redirect(URL(\'meme\'))\n    session.counter = (session.counter or 0) + 1\n    return dict(message = "", counter=session.counter)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef meme():\n    save_path = \'/memegenerator/static/\'\n    image = request.vars.img\n    form_data = cgi.FieldStorage()\n    file_f = form_data[\'img\'].value\n    future_meme = os.path.join(save_path, "picture.jpg")\n    future_meme.write(file_f)\n    #final_img = os.path.join(save_path, "meme.jpg")\n    #text = request.vars.text\n    #lib = ctypes.CDLL(\'./libmeme.so\')\n    #pfun = lib.makeMeme\n    #x = pfun(img, final_img, text)\n    return dict(message = "IMAGE",image = future_meme)\n\nresponse._vars=response._caller(meme)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/vagrant/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/vagrant/web2py/applications/memegenerator/controllers/default.py", line 79, in <module>\n  File "/vagrant/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/vagrant/web2py/applications/memegenerator/controllers/default.py", line 69, in meme\n    file_f = form_data[\'img\'].value\n  File "/usr/lib/python2.7/cgi.py", line 540, in __getitem__\n    raise KeyError, key\nKeyError: \'img\'\n'
p11
s.